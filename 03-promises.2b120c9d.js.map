{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,wBACnCE,UAAWH,SAASC,cAAc,uBAClCG,YAAaJ,SAASC,cAAc,yBA8BtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EAEFF,EAAQ,C,SAAEH,E,MAAUC,IAGpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAtCbT,EAAKC,KAAKgB,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAMC,iBACN,MAAMC,EAAaC,OAAOrB,EAAKI,WAAWkB,OACpCC,EAAOF,OAAOrB,EAAKK,UAAUiB,OAC7BE,EAASH,OAAOrB,EAAKM,YAAYgB,OACvC,IAAId,EACAC,EACJ,IAAK,IAAIgB,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAChCjB,EAAWiB,EACXhB,EAAQW,GAAcK,EAAI,GAAKF,EAE/BhB,EAAcC,EAAUC,GACrBiB,MAAKC,IACJC,EAAA9B,GAAS+B,OAAOC,QACd,uBAAqBH,EAAInB,eAAoBmB,EAAElB,UAAe,IAGjEsB,OAAMC,IACLJ,EAAA9B,GAAS+B,OAAOI,QACd,sBAAoBD,EAAExB,eAAmBwB,EAAEvB,UAAc,IAIjET,EAAKC,KAAKiC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector('input[ name=\"delay\"]'),\n  stepInput: document.querySelector('input[ name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  const firstDelay = Number(refs.delayInput.value);\n  const step = Number(refs.stepInput.value);\n  const amount = Number(refs.amountInput.value);\n  let position;\n  let delay;\n  for (let i = 1; i <= amount; i += 1) {\n    position = i;\n    delay = firstDelay + (i - 1) * step;\n\n    createPromise(position, delay)\n      .then(result => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${result.position} in ${result.delay}ms`\n        );\n      })\n      .catch(error => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${error.position} in ${error.delay}ms`\n        );\n      });\n  }\n  refs.form.reset();\n}\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delayInput","stepInput","amountInput","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","firstDelay","Number","value","step","amount","i","then","result","$parcel$interopDefault","Notify","success","catch","error","failure","reset"],"version":3,"file":"03-promises.2b120c9d.js.map"}